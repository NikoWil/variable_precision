CMAKE_MINIMUM_REQUIRED(VERSION 3.14)
PROJECT(code)

ADD_COMPILE_OPTIONS(-fopenmp -lpthread)

SET(CMAKE_CXX_STANDARD 14)

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
ELSEIF()
    MESSAGE(FATAL_ERROR "Neither GCC nor MSVC detected!")
ENDIF()

FIND_PACKAGE(OpenMP)
IF (OPENMP_FOUND)
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF()

ADD_EXECUTABLE(code spmv.h performance_tests.h)

TARGET_SOURCES(code PRIVATE main.cpp power_iteration.cpp power_iteration.h communication.cpp communication.h)

TARGET_LINK_LIBRARIES(code PRIVATE segmentation formats segmentation_char)

FIND_PACKAGE(MPI REQUIRED)

TARGET_INCLUDE_DIRECTORIES(code PRIVATE ${MPI_INCLUDE_PATH})
TARGET_LINK_LIBRARIES(code PRIVATE ${MPI_LIBRARIES})

IF(MPI_COMPILE_FLAGS)
    SET_TARGET_PROPERTIES(code PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
ENDIF()

IF(MPI_LINK_FLAGS)
    SET_TARGET_PROPERTIES(code PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
ENDIF()

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    MESSAGE("MSCV detected")
    TARGET_COMPILE_OPTIONS(code PRIVATE /W4 /WX)
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    MESSAGE("GCC detected")
    TARGET_COMPILE_OPTIONS(code PRIVATE -Wall -Wextra -pedantic -Werror)
ELSEIF()
    MESSAGE(FATAL_ERROR "Neither GCC nor MSVC detected!")
ENDIF()


ADD_EXECUTABLE(test)

TARGET_SOURCES(test PRIVATE test_main.cpp segmentation/segmentation_test.h segmentation/segmentation_test.cpp)

TARGET_LINK_LIBRARIES(test segmentation)

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    MESSAGE("MSCV detected")
    TARGET_COMPILE_OPTIONS(test PRIVATE /W4 /WX)
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    MESSAGE("GCC detected")
    TARGET_COMPILE_OPTIONS(test PRIVATE -Wall -Wextra -pedantic -Werror)
ELSEIF()
    MESSAGE(FATAL_ERROR "Neither GCC nor MSVC detected!")
ENDIF()

ADD_SUBDIRECTORY(matrix_formats)
ADD_SUBDIRECTORY(segmentation)
ADD_SUBDIRECTORY(segmentation_char)
ADD_SUBDIRECTORY(util)